---
description: Apply these rules when creating the project
globs:
alwaysApply: true
---
# Project Requirements Document

## 1. Project Overview

This project is all about building an AI-based, Spotify-integrated music player that transforms a simple text description of a playlist into a fully dynamic, personalized radio station. The player not only creates an initial playlist based on the input but also continuously refines it using real-time feedback from user interactions such as thumbs up, thumbs down, skip, and even when songs are played fully. The AI engine works as a self-improving DJ, leveraging past playlists and interactions to fine-tune the music flow and ensure a vibrant listening experience.

The main goal is to deliver a unique, personalized music service that adapts constantly to your listening habits. This project is being built to provide a nostalgic, retro 1990s-inspired interface paired with modern AI capabilities. The key objectives are to maintain minimal repetition, smartly detect adjacent musical styles, and ensure the station feels fresh each day—all while keeping user interaction simple and engaging.

## 2. In-Scope vs. Out-of-Scope

**In-Scope:**

*   A web application optimized primarily for iOS users.
*   User authentication via Spotify OAuth or API key login.
*   A text input interface for the user to describe the desired playlist.
*   Basic music player controls: play, pause, thumbs up, thumbs down, and skip.
*   Integration with either official Spotify APIs or alternative GPT/LLM-based controllers to manage playback.
*   A dynamic AI engine that updates the playlist in real time based on user feedback and historical data.
*   Continuous improvement of track recommendations through an LLM-based preference prediction engine.
*   Deployment on Replit using tools like Replit DB for simple data persistence.
*   A retro 1990s-inspired UI design that is both functional and aesthetically nostalgic.

**Out-of-Scope:**

*   Advanced security or privacy measures; data storage is kept simple for personal use.
*   Complex data privacy and compliance (this is not built for enterprise or large-scale public use).
*   Additional social sharing features or external music discovery feeds.
*   Mobile app deployment beyond web-based access (the focus is on a web app for iOS).

## 3. User Flow

When a user first lands on the application, they are greeted with a retro 1990s-inspired interface that signals simplicity and nostalgia. The user will be prompted to log in either via Spotify OAuth or using an API key. Once authenticated, they arrive at a clean page featuring a text input field where they can describe the kind of playlist they want to listen to. This description is immediately sent to an LLM (Language Learning Model) which generates the first version of the playlist.

After the initial playlist is created, the music player begins streaming songs with visible basic controls: play, pause, thumbs up, thumbs down, and skip. As the user listens, every interaction (e.g., pressing thumbs up, down, or skip) is recorded and sent back to the backend. The AI engine then re-prompts itself with this new and historical data, updating the playlist in real time to remove repetition and introduce tracks that are musically related to the user's positive feedback. This seamless loop ensures that the station continuously evolves into an even more personalized mix as the session progresses.

## 4. Core Features

*   **User Authentication:**

    *   Login via Spotify OAuth or API key-based system.
    *   Integration with Spotify to access listening history and playback.

*   **Playlist Initialization:**

    *   A simple text input field for users to describe their desired playlist.
    *   Use of an LLM to generate an initial playlist based on the description.

*   **Music Player Controls:**

    *   Basic controls such as play, pause, thumbs up, thumbs down, and skip.
    *   Immediate feedback and control adjustments as the user interacts with the player.

*   **Dynamic AI Engine:**

    *   Continuous preference prediction based on real-time interactions (thumbs, skips, etc.).
    *   The LLM re-prompts itself with each user input and historical data to update the playlist.
    *   Prevention of repetitive music by finding and suggesting adjacent tracks/artists related to those celebrated.

*   **Spotify and AI Integration:**

    *   Use of official Spotify APIs or alternative methods (like GPT-based controllers) for seamless control.
    *   API integration to manage the playback and adjust the user’s playlist accordingly.

*   **Retro User Interface:**

    *   A visually engaging, 1990s-inspired design with bold fonts and vibrant colors.
    *   Focus on easy usability and intuitive navigation.

## 5. Tech Stack & Tools

*   **Frontend:**

    *   HTML, CSS, JavaScript for the core UI.
    *   A framework like React could also be considered for a more dynamic experience, although simplicity is key given the retro design.

*   **Backend:**

    *   Node.js and Express.js to handle server-side operations.
    *   Replit DB for lightweight data storage (user interactions, historical data).

*   **APIs & Integrations:**

    *   Spotify OAuth and Spotify API for user authentication and music control.
    *   OpenAI API (or similar, such as GPT-4/Claude) to serve as the LLM for generating playlists and processing feedback.

*   **Additional Tools:**

    *   Replit as the IDE and hosting platform due to its ease of use for deployment and coding collaboration.
    *   Potential plugin integration tools like Cursor or Windsurf if improved code collaboration or additional features are needed.

## 6. Non-Functional Requirements

*   **Performance:**

    *   The playlist updates should occur in near-real time after user interactions.
    *   The application must ensure minimal delay between input and the AI updating the music list.

*   **Security:**

    *   While security is not a major concern for personal use, user authentication via Spotify OAuth should be handled securely.
    *   Data storage is kept simple and straightforward.

*   **Usability:**

    *   The user interface must offer an intuitive, 1990s-inspired experience while keeping navigation and controls straightforward.
    *   The application should accommodate quick user interactions with immediate visual feedback.

*   **Scalability & Reliability:**

    *   Designed primarily for personal use and low traffic; can scale if needed but current requirements are modest.
    *   Must handle API rate limits gracefully and ensure continuous integration between Spotify and the AI engine.

## 7. Constraints & Assumptions

*   **Constraints:**

    *   Assumes the availability and reliability of both Spotify’s APIs and the chosen LLM (OpenAI API or similar).
    *   Development and deployment will occur on Replit, which may impose certain limitations in storage or server capabilities.
    *   The user base is small and personal; therefore, extensive multi-user scalability is not a primary focus.

*   **Assumptions:**

    *   Users are comfortable with a retro, 1990s-styled interface.
    *   User interactions (feedback) will be frequent enough to allow the AI engine to meaningfully adapt the playlist.
    *   Basic data persistence (user interactions and historical playlist data) will be sufficient without high-end secure storage.
    *   Developers and users are open to using both official Spotify tools and alternative methods like a GPT-based controller if required.

## 8. Known Issues & Potential Pitfalls

*   **API Rate Limits:**

    *   Spotify’s API and the LLM provider may impose usage limits. This could affect real-time performance. To mitigate, implement error handling and consider caching strategies for repeated requests.

*   **Real-Time Processing:**

    *   The continuous re-prompting of the AI engine for each interaction may lead to performance challenges. Optimizing the frequency of requests or batching inputs might be necessary.

*   **Integration Complexity:**

    *   Coordinating between the Spotify API and the LLM could introduce integration complexities. Clear abstraction layers should be maintained and robust error-handling strategies employed.

*   **User Experience Concerns:**

    *   The retro interface must be both attractive and functional. Avoid over-designing so that users can still navigate controls easily. Rigorous user testing is recommended to balance nostalgia with modern usability.

*   **Reliance on External Services:**

    *   The project heavily depends on external APIs (Spotify and OpenAI/GPT). Ensure that any downtime or rate limitation is handled gracefully with fallback procedures.

This document serves as the comprehensive guide for our AI-based Spotify music player project, ensuring that every aspect—from user authentication to dynamic AI playlist curation—is well understood and detailed. All subsequent technical documents (Tech Stack, Frontend Guidelines, Backend Structure, etc.) will reference this PRD to maintain clarity and cohesion throughout the project development lifecycle.
